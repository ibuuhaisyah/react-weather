{"version":3,"sources":["logo.svg","components/Header.js","components/Footer.js","components/WeatherSearch.js","components/WeatherTable.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Footer","WeatherSearch","state","cityName","type","class","id","placeholder","value","this","onChange","e","setState","target","onClick","props","handleSearchClick","React","Component","WeatherTable","weathers","handleWeatherSelect","map","val","key","dt","src","weather","icon","main","Date","toDateString","temp","day","toFixed","Main","city","console","log","fetchApi","selectedweather","filter","selectedWeather","fetch","then","response","json","data","catch","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,4GCU5BC,MARf,WACI,OACI,4BAAQC,UAAU,uCACd,iDCHCC,EAAS,WAClB,OACA,4BAAQD,UAAU,uCACd,oD,4BCgCOE,E,kDAjCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,SAAU,IAHJ,E,qDAOJ,IAAD,OAEL,OACI,6BACI,yBAAKJ,UAAU,uBACX,yBAAKA,UAAU,QACX,2BAAOK,KAAK,QAAQC,MAAM,eAAeC,GAAG,2BAA2BC,YAAY,SAASC,MAAOC,KAAKP,MAAMC,SAAUO,SAAU,SAACC,GAAD,OAAM,EAAKC,SAAS,CAACT,SAASQ,EAAEE,OAAOL,YAE7K,yBAAKT,UAAU,QACX,4BAAQA,UAAU,4BAA4Be,QAAS,kBAAM,EAAKC,MAAMC,kBAAkB,EAAKd,MAAMC,YAArG,iB,GAjBIc,IAAMC,WC8BnBC,MA9Bf,YAAwD,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,oBAE7B,OACI,yBAAKtB,UAAU,mCACX,+DACA,+BACI,gCAGA,+BAEQqB,EAASE,KAAI,SAAAC,GACT,OACI,wBAAIC,IAAKD,EAAIE,GAAIX,QAAS,kBAAMO,EAAoBE,KAChD,gCAAK,yBAAKG,IAAG,4CAAuCH,EAAII,QAAQ,GAAGC,KAAtD,cACb,4BAAKL,EAAII,QAAQ,GAAGE,MACpB,4BAAK,IAAIC,KAAY,IAAPP,EAAIE,IAASM,gBAC3B,4BAAMR,EAAIS,KAAKC,IAAKC,QAAQ,GAA5B,mBCyCrBC,E,kDAvDX,aAAe,IAAD,8BACV,gBAiBJnB,kBAAoB,SAACoB,GACjBC,QAAQC,IAAI,WACX,EAAKC,SAAS,iBApBL,EAyCdlB,oBAAsB,SAACI,GACnBY,QAAQC,IAAIb,GAEZ,IAAIe,EAAkB,EAAKtC,MAAMkB,SAASqB,QAAO,SAAAlB,GAC7C,OAAOA,EAAIE,KAAOA,KAGtB,EAAKb,SAAS,CACV8B,gBAAgBF,KA/CpB,EAAKtC,MAAQ,CACTkB,SAAU,GACVsB,gBAAiB,MAJX,E,qDASV,OACI,yBAAK3C,UAAU,4BACX,kBAAC,EAAD,CAAeiB,kBAAmBP,KAAKO,oBACvC,kBAAC,EAAD,CAAcI,SAAUX,KAAKP,MAAMkB,SAAUC,oBAAqBZ,KAAKY,yB,4EAe1Ee,GAAO,IAAD,OAEXO,MAAM,4DAA8DP,EAAO,wDACtEQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKnC,SAAS,CACVQ,SAAU2B,EAAI,UAGrBC,OAAM,SAACC,GACJZ,QAAQY,MAAM,QAASA,U,GAtCpBhC,IAAMC,WCYVgC,MAVf,WACE,OACE,yBAAKnD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLZ,QAAQY,MAAMA,EAAMiB,c","file":"static/js/main.57339c2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction Header(){\r\n    return(\r\n        <header className=\"bg-dark text-light py-5 text-center\">\r\n            <h1>Weather Website</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nexport const Footer = () => {\r\n    return(\r\n    <footer className=\"bg-dark text-light py-5 text-center\">\r\n        <p>Copyright &copy; 2020</p>\r\n    </footer>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nclass WeatherSearch extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            cityName: ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card my-5 py-5 px-5\">\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"email\" class=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"Search\" value={this.state.cityName} onChange={(e)=> this.setState({cityName:e.target.value}) }></input>\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <button className=\"btn btn-primary btn-block\" onClick={() => this.props.handleSearchClick(this.state.cityName)}>Search</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            // <form>\r\n            //     <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n            //     <input type=\"text\" name=\"country\" placeholder=\"Country..\" />\r\n            //     <button>Get Weather</button>\r\n            // </form>\r\n\r\n        )\r\n    }\r\n    \r\n     \r\n\r\n}\r\n\r\nexport default WeatherSearch;","import React from 'react';\r\n\r\n\r\nfunction WeatherTable({weathers, handleWeatherSelect}) {\r\n\r\n    return (\r\n        <div className=\"card my-5 py-5 px-5 text-center\">\r\n            <h1>This is a weather table section</h1>\r\n            <table>\r\n                <thead>\r\n\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        weathers.map(val => {\r\n                            return (\r\n                                <tr key={val.dt} onClick={() => handleWeatherSelect(val)}>\r\n                                    <td> <img src={`https://openweathermap.org/img/wn/${val.weather[0].icon}@2x.png`} /></td>\r\n                                    <td>{val.weather[0].main}</td>\r\n                                    <td>{new Date(val.dt*1000).toDateString()}</td>\r\n                                    <td>{(val.temp.day).toFixed(0)} &deg; C</td>\r\n                                    {/* <td>{(val.temp.day-273.15).toFixed(0)} &deg; C</td> */}\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherTable;","import React from 'react';\r\nimport WeatherSearch from './WeatherSearch';\r\nimport WeatherDetail from './WeatherDetail';\r\nimport WeatherTable from './WeatherTable';\r\n\r\nclass Main extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            weathers: [],\r\n            selectedWeather: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container py-3 card my-3\">\r\n                <WeatherSearch handleSearchClick={this.handleSearchClick}/>\r\n                <WeatherTable weathers={this.state.weathers} handleWeatherSelect={this.handleWeatherSelect} />\r\n                {/* <WeatherDetail selectedWeather={selectedWeather}/> */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleSearchClick = (city) => {\r\n        console.log('clicked')\r\n         this.fetchApi('Kuala Lumpur')\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.fetchApi('Kuala Lumpur')\r\n    }\r\n\r\n    fetchApi(city) {\r\n        // fetch('https://api.openweathermap.org/data/2.5/forecast/daily?q=Kuala%20Lumpur&appid=9fd7a449d055dba26a982a3220f32aa2&units=metric')\r\n        fetch('https://api.openweathermap.org/data/2.5/forecast/daily?q=' + city + '&appid=9a875f3b663d836442770050455b2fbf&units=metric')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    weathers: data['list']\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error', error);\r\n            })\r\n    }\r\n\r\n    handleWeatherSelect = (dt) => {\r\n        console.log(dt)\r\n\r\n        let selectedweather = this.state.weathers.filter(val=>{\r\n            return val.dt === dt\r\n        })\r\n\r\n        this.setState({\r\n            selectedWeather:selectedweather\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport {Footer} from './components/Footer';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Main/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}